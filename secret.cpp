#include <cstdlib>
#include <cstdio>
#include "sha256.hpp"
#include <vector>
#define bufflen 256
#define hashlen 64

std::vector<void*> currMalloc;
int corruptedMalloc = 0;
void* copyptr = NULL;
size_t copyptrsize = 0;

void getSha256(char buff[64], char* input, size_t length){
    uint8_t hash[32];
    char asciiHash[64+1];
    memset(asciiHash, 0, 64+1);
    calc_sha_256(hash, input, length);
    char* buf = &(asciiHash[0]);
    for(int i = 0; i < 32; i++){
        buf += snprintf(buf, 3, "%02x", hash[i]);
    }
    memcpy(buff, asciiHash, 64);
}

void* fakeMalloc(size_t size){
    void* ret = malloc(size);
    if(corruptedMalloc && copyptr && copyptrsize == size){
        void* temp = copyptr;
        copyptr = ret;
        currMalloc.push_back(ret);
        return temp;
    }
    if(corruptedMalloc && copyptr == NULL){
        copyptr = ret;
        copyptrsize = size;
    }
    currMalloc.push_back(ret);
    return ret;
}

void fakeFree(void* ptr){
    int isFreed = 1;
    for(int i = 0; i < currMalloc.size(); i++){
        void* p = currMalloc[i];
        if(p == ptr){
            isFreed = 0;
            currMalloc.erase(currMalloc.begin()+i);
            break;
        }
    }
    if(isFreed){
        corruptedMalloc = 1;
    }else{
        free(ptr);
    }
}

void getOpeningMessage(char* username){
    char* msg = (char*)fakeMalloc(bufflen);
    char* errmsg = (char*)fakeMalloc(bufflen);
    int written = snprintf(msg, bufflen, "Does %s know the password?\n", username);
    if(written > bufflen){
        snprintf(errmsg, bufflen, "Do you know the password?\n");
        printf(errmsg);
        fakeFree(msg);
    }else{
        printf(msg);
    }
    fakeFree(errmsg);
    fakeFree(msg);
}

void setPassword(char* password){
    printf("Setting password to: %s\n", password);
    char hash[hashlen];
    memset(hash, 0, hashlen);
    getSha256(hash, password, strlen(password));
    FILE* file = fopen("./password.txt", "wb");
    fwrite(hash, sizeof(char), hashlen, file);
    fclose(file);
}

int main(int argc, char* argv[]){
    if(argc != 2){
        printf("Usage: ./secret [password]\n");
        return 1;
    }
    char* username = getenv("LOGNAME");
    getOpeningMessage(username);
    char* targetHash = (char*)fakeMalloc(64);
    char* inputHash = (char*)fakeMalloc(64);
    memset(targetHash, 0, 64);
    memset(inputHash, 0, 64);

    FILE* file = fopen("./password.txt", "rb");
    fread(targetHash, sizeof(char), hashlen, file);
    fclose(file);
    getSha256(inputHash, argv[1], strlen(argv[1]));
    int cmp = memcmp(targetHash, inputHash, hashlen);
    fakeFree(inputHash);
    fakeFree(targetHash);
    if(cmp){
        printf("Incorrect password inputted\n");
        return 1;
    }
    char buff[bufflen];
    memset(buff, 0, bufflen);
    FILE* secret = fopen("./secret.txt", "r");
    fread(buff, sizeof(char), bufflen, secret);
    fclose(secret);
    printf("The secret is:\n");
    printf("%s\n", buff);
    return 0;
}
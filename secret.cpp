#include <cstdlib>
#include <cstdio>
#include "sha256.hpp"
#include <vector>
#define errmsglen 88 //length for error message
#define msglen 384 //length for both opening messages
#define bufflen 256 //max length of the secret
#define hashlen 240 //length of hashes
#define realHashLen 64 //length of sha256 hash (as a string)
#define binaryHashLen 32 //length of sha256 hash (as binary data)

/*
    Stores the hash of input as a string into buff
*/
void getSha256(char buff[realHashLen], char* input, size_t length){
    uint8_t hash[binaryHashLen];
    char asciiHash[realHashLen+1];
    memset(asciiHash, 0, realHashLen+1);
    calc_sha_256(hash, input, length); //gets binary hash of input
    char* buf = &(asciiHash[0]); //we can't increment an array so we use a pointer
    for(int i = 0; i < binaryHashLen; i++){ //converts binary data into string
        buf += snprintf(buf, 3, "%02x", hash[i]);
    }
    memcpy(buff, asciiHash, realHashLen); //copy's string into buff
}

/*
    Prints the opening messages. Also has a double free vulnerability if you enter the if statement
*/
void getOpeningMessage(char* username){
    char* errmsg = (char*)malloc(errmsglen);
    char* msg = (char*)malloc(msglen);
    int written = snprintf(msg, msglen, "Does %s know the password?\n", username);
    if(written > msglen){
        /*
        Method of double free vulnerability provided by Professor Henry
        */
        free(msg); //first free
        snprintf(errmsg, errmsglen+1, "Unfortunately your name is too long to print. With that said, do you know the password?\n");
        //Off by one to corrupt apparent size of msg
        printf(errmsg);
        free(msg); //double free
    }else{
        printf(msg);
        free(msg);
    }
    char* msg2 = (char*)malloc(msglen);
    snprintf(msg2, msglen, "We'll test the password you entered against our password. If they match, we will tell you our secret!\n");
    printf(msg2);
    free(msg2);
    free(errmsg);
}

/*
    Sets the password.txt file to the hash of password.
*/
void setPassword(char* password){
    printf("Setting password to: %s\n", password);
    char hash[hashlen];
    memset(hash, 0, hashlen);
    getSha256(hash, password, strlen(password));
    FILE* file = fopen("./password.txt", "wb");
    fwrite(hash, sizeof(char), hashlen, file);
    fclose(file);
}

int main(int argc, char* argv[]){
    if(argc != 2){
        printf("Usage: ./secret [password]\n");
        return 1;
    }
    char* username = getenv("LOGNAME");
    getOpeningMessage(username);
    char* targetHash = (char*)malloc(hashlen); //hash stored in password.txt
    char* inputHash = (char*)malloc(hashlen); //hash of argv[1]
    memset(targetHash, 0, hashlen);
    memset(inputHash, 0, hashlen);

    FILE* file = fopen("./password.txt", "rb");
    fread(targetHash, sizeof(char), hashlen, file); //reads password.txt to get target hash
    fclose(file);
    getSha256(inputHash, argv[1], strlen(argv[1])); //gets hash of argv[1]
    int cmp = memcmp(targetHash, inputHash, hashlen); //compares target and input hash
    if(cmp){ //if they are different
        printf("Incorrect password inputted\n");
        return 1;
    }
    char buff[bufflen];
    memset(buff, 0, bufflen);
    FILE* secret = fopen("./secret.txt", "r");
    fread(buff, sizeof(char), bufflen, secret); //reads secret.txt
    fclose(secret);
    printf("The secret is:\n"); //prints it out
    printf("%s\n", buff);
    return 0;
}